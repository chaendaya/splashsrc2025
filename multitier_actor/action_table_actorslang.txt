0	(	Shift 5
0	-	Shift 3
0	[	Shift 13
0	append	Shift 25
0	begin	Shift 11
0	car	Shift 16
0	cdr	Shift 17
0	identifier	Shift 7
0	if	Shift 6
0	integer_number	Shift 2
0	let	Shift 8
0	letrec	Shift 9
0	new	Shift 23
0	null?	Shift 15
0	print	Shift 18
0	proc	Shift 10
0	read	Shift 19
0	readInt	Shift 20
0	ready	Shift 22
0	send	Shift 21
0	set	Shift 12
0	spawn	Shift 24
0	string	Shift 4
0	zero?	Shift 14
1	$	Accept
2	(	Reduce 1
2	)	Reduce 1
2	++	Reduce 1
2	,	Reduce 1
2	-	Reduce 1
2	;	Reduce 1
2	==	Reduce 1
2	[	Reduce 1
2	append	Reduce 1
2	begin	Reduce 1
2	car	Reduce 1
2	cdr	Reduce 1
2	else	Reduce 1
2	end	Reduce 1
2	identifier	Reduce 1
2	if	Reduce 1
2	in	Reduce 1
2	integer_number	Reduce 1
2	let	Reduce 1
2	letrec	Reduce 1
2	new	Reduce 1
2	null?	Reduce 1
2	print	Reduce 1
2	proc	Reduce 1
2	read	Reduce 1
2	readInt	Reduce 1
2	ready	Reduce 1
2	send	Reduce 1
2	set	Reduce 1
2	spawn	Reduce 1
2	string	Reduce 1
2	then	Reduce 1
2	zero?	Reduce 1
2	$	Reduce 1
3	(	Shift 27
3	integer_number	Shift 26
4	(	Reduce 3
4	)	Reduce 3
4	++	Reduce 3
4	,	Reduce 3
4	-	Reduce 3
4	;	Reduce 3
4	==	Reduce 3
4	[	Reduce 3
4	append	Reduce 3
4	begin	Reduce 3
4	car	Reduce 3
4	cdr	Reduce 3
4	else	Reduce 3
4	end	Reduce 3
4	identifier	Reduce 3
4	if	Reduce 3
4	in	Reduce 3
4	integer_number	Reduce 3
4	let	Reduce 3
4	letrec	Reduce 3
4	new	Reduce 3
4	null?	Reduce 3
4	print	Reduce 3
4	proc	Reduce 3
4	read	Reduce 3
4	readInt	Reduce 3
4	ready	Reduce 3
4	send	Reduce 3
4	set	Reduce 3
4	spawn	Reduce 3
4	string	Reduce 3
4	then	Reduce 3
4	zero?	Reduce 3
4	$	Reduce 3
5	(	Shift 5
5	)	Reduce 37
5	-	Shift 3
5	[	Shift 13
5	append	Shift 25
5	begin	Shift 11
5	car	Shift 16
5	cdr	Shift 17
5	identifier	Shift 7
5	if	Shift 6
5	integer_number	Shift 2
5	let	Shift 8
5	letrec	Shift 9
5	new	Shift 23
5	null?	Shift 15
5	print	Shift 18
5	proc	Shift 10
5	read	Shift 19
5	readInt	Shift 20
5	ready	Shift 22
5	send	Shift 21
5	set	Shift 12
5	spawn	Shift 24
5	string	Shift 4
5	zero?	Shift 14
6	(	Shift 5
6	-	Shift 3
6	[	Shift 13
6	append	Shift 25
6	begin	Shift 11
6	car	Shift 16
6	cdr	Shift 17
6	identifier	Shift 7
6	if	Shift 6
6	integer_number	Shift 2
6	let	Shift 8
6	letrec	Shift 9
6	new	Shift 23
6	null?	Shift 15
6	print	Shift 18
6	proc	Shift 10
6	read	Shift 19
6	readInt	Shift 20
6	ready	Shift 22
6	send	Shift 21
6	set	Shift 12
6	spawn	Shift 24
6	string	Shift 4
6	zero?	Shift 14
7	(	Reduce 6
7	)	Reduce 6
7	++	Reduce 6
7	,	Reduce 6
7	-	Reduce 6
7	;	Reduce 6
7	==	Reduce 6
7	[	Reduce 6
7	append	Reduce 6
7	begin	Reduce 6
7	car	Reduce 6
7	cdr	Reduce 6
7	else	Reduce 6
7	end	Reduce 6
7	identifier	Reduce 6
7	if	Reduce 6
7	in	Reduce 6
7	integer_number	Reduce 6
7	let	Reduce 6
7	letrec	Reduce 6
7	new	Reduce 6
7	null?	Reduce 6
7	print	Reduce 6
7	proc	Reduce 6
7	read	Reduce 6
7	readInt	Reduce 6
7	ready	Reduce 6
7	send	Reduce 6
7	set	Reduce 6
7	spawn	Reduce 6
7	string	Reduce 6
7	then	Reduce 6
7	zero?	Reduce 6
7	$	Reduce 6
8	(	Shift 31
8	identifier	Shift 32
9	identifier	Shift 34
10	(	Reduce 45
10	identifier	Shift 36
11	(	Shift 5
11	-	Shift 3
11	[	Shift 13
11	append	Shift 25
11	begin	Shift 11
11	car	Shift 16
11	cdr	Shift 17
11	identifier	Shift 7
11	if	Shift 6
11	integer_number	Shift 2
11	let	Shift 8
11	letrec	Shift 9
11	new	Shift 23
11	null?	Shift 15
11	print	Shift 18
11	proc	Shift 10
11	read	Shift 19
11	readInt	Shift 20
11	ready	Shift 22
11	send	Shift 21
11	set	Shift 12
11	spawn	Shift 24
11	string	Shift 4
11	zero?	Shift 14
12	identifier	Shift 39
13	integer_number	Shift 41
14	(	Shift 42
15	(	Shift 43
16	(	Shift 44
17	(	Shift 45
18	(	Shift 46
19	(	Shift 47
20	(	Shift 48
21	(	Shift 49
22	(	Shift 50
23	(	Shift 51
24	(	Shift 52
25	(	Shift 53
26	(	Reduce 2
26	)	Reduce 2
26	++	Reduce 2
26	,	Reduce 2
26	-	Reduce 2
26	;	Reduce 2
26	==	Reduce 2
26	[	Reduce 2
26	append	Reduce 2
26	begin	Reduce 2
26	car	Reduce 2
26	cdr	Reduce 2
26	else	Reduce 2
26	end	Reduce 2
26	identifier	Reduce 2
26	if	Reduce 2
26	in	Reduce 2
26	integer_number	Reduce 2
26	let	Reduce 2
26	letrec	Reduce 2
26	new	Reduce 2
26	null?	Reduce 2
26	print	Reduce 2
26	proc	Reduce 2
26	read	Reduce 2
26	readInt	Reduce 2
26	ready	Reduce 2
26	send	Reduce 2
26	set	Reduce 2
26	spawn	Reduce 2
26	string	Reduce 2
26	then	Reduce 2
26	zero?	Reduce 2
26	$	Reduce 2
27	(	Shift 5
27	-	Shift 3
27	[	Shift 13
27	append	Shift 25
27	begin	Shift 11
27	car	Shift 16
27	cdr	Shift 17
27	identifier	Shift 7
27	if	Shift 6
27	integer_number	Shift 2
27	let	Shift 8
27	letrec	Shift 9
27	new	Shift 23
27	null?	Shift 15
27	print	Shift 18
27	proc	Shift 10
27	read	Shift 19
27	readInt	Shift 20
27	ready	Shift 22
27	send	Shift 21
27	set	Shift 12
27	spawn	Shift 24
27	string	Shift 4
27	zero?	Shift 14
28	(	Shift 5
28	)	Reduce 38
28	,	Shift 56
28	-	Shift 3
28	==	Shift 57
28	[	Shift 13
28	append	Shift 25
28	begin	Shift 11
28	car	Shift 16
28	cdr	Shift 17
28	identifier	Shift 7
28	if	Shift 6
28	integer_number	Shift 2
28	let	Shift 8
28	letrec	Shift 9
28	new	Shift 23
28	null?	Shift 15
28	print	Shift 18
28	proc	Shift 10
28	read	Shift 19
28	readInt	Shift 20
28	ready	Shift 22
28	send	Shift 21
28	set	Shift 12
28	spawn	Shift 24
28	string	Shift 4
28	zero?	Shift 14
29	)	Shift 58
30	then	Shift 59
31	)	Reduce 41
31	identifier	Shift 61
32	=	Shift 62
33	in	Shift 63
34	(	Reduce 45
34	identifier	Shift 36
35	(	Shift 65
36	(	Reduce 46
37	;	Shift 66
37	end	Reduce 14
38	end	Shift 67
39	=	Shift 68
40	]	Shift 69
41	,	Shift 70
41	]	Reduce 18
42	(	Shift 5
42	-	Shift 3
42	[	Shift 13
42	append	Shift 25
42	begin	Shift 11
42	car	Shift 16
42	cdr	Shift 17
42	identifier	Shift 7
42	if	Shift 6
42	integer_number	Shift 2
42	let	Shift 8
42	letrec	Shift 9
42	new	Shift 23
42	null?	Shift 15
42	print	Shift 18
42	proc	Shift 10
42	read	Shift 19
42	readInt	Shift 20
42	ready	Shift 22
42	send	Shift 21
42	set	Shift 12
42	spawn	Shift 24
42	string	Shift 4
42	zero?	Shift 14
43	(	Shift 5
43	-	Shift 3
43	[	Shift 13
43	append	Shift 25
43	begin	Shift 11
43	car	Shift 16
43	cdr	Shift 17
43	identifier	Shift 7
43	if	Shift 6
43	integer_number	Shift 2
43	let	Shift 8
43	letrec	Shift 9
43	new	Shift 23
43	null?	Shift 15
43	print	Shift 18
43	proc	Shift 10
43	read	Shift 19
43	readInt	Shift 20
43	ready	Shift 22
43	send	Shift 21
43	set	Shift 12
43	spawn	Shift 24
43	string	Shift 4
43	zero?	Shift 14
44	(	Shift 5
44	-	Shift 3
44	[	Shift 13
44	append	Shift 25
44	begin	Shift 11
44	car	Shift 16
44	cdr	Shift 17
44	identifier	Shift 7
44	if	Shift 6
44	integer_number	Shift 2
44	let	Shift 8
44	letrec	Shift 9
44	new	Shift 23
44	null?	Shift 15
44	print	Shift 18
44	proc	Shift 10
44	read	Shift 19
44	readInt	Shift 20
44	ready	Shift 22
44	send	Shift 21
44	set	Shift 12
44	spawn	Shift 24
44	string	Shift 4
44	zero?	Shift 14
45	(	Shift 5
45	-	Shift 3
45	[	Shift 13
45	append	Shift 25
45	begin	Shift 11
45	car	Shift 16
45	cdr	Shift 17
45	identifier	Shift 7
45	if	Shift 6
45	integer_number	Shift 2
45	let	Shift 8
45	letrec	Shift 9
45	new	Shift 23
45	null?	Shift 15
45	print	Shift 18
45	proc	Shift 10
45	read	Shift 19
45	readInt	Shift 20
45	ready	Shift 22
45	send	Shift 21
45	set	Shift 12
45	spawn	Shift 24
45	string	Shift 4
45	zero?	Shift 14
46	(	Shift 5
46	-	Shift 3
46	[	Shift 13
46	append	Shift 25
46	begin	Shift 11
46	car	Shift 16
46	cdr	Shift 17
46	identifier	Shift 7
46	if	Shift 6
46	integer_number	Shift 2
46	let	Shift 8
46	letrec	Shift 9
46	new	Shift 23
46	null?	Shift 15
46	print	Shift 18
46	proc	Shift 10
46	read	Shift 19
46	readInt	Shift 20
46	ready	Shift 22
46	send	Shift 21
46	set	Shift 12
46	spawn	Shift 24
46	string	Shift 4
46	zero?	Shift 14
47	)	Shift 77
48	)	Shift 78
49	(	Shift 5
49	-	Shift 3
49	[	Shift 13
49	append	Shift 25
49	begin	Shift 11
49	car	Shift 16
49	cdr	Shift 17
49	identifier	Shift 7
49	if	Shift 6
49	integer_number	Shift 2
49	let	Shift 8
49	letrec	Shift 9
49	new	Shift 23
49	null?	Shift 15
49	print	Shift 18
49	proc	Shift 10
49	read	Shift 19
49	readInt	Shift 20
49	ready	Shift 22
49	send	Shift 21
49	set	Shift 12
49	spawn	Shift 24
49	string	Shift 4
49	zero?	Shift 14
50	(	Shift 5
50	-	Shift 3
50	[	Shift 13
50	append	Shift 25
50	begin	Shift 11
50	car	Shift 16
50	cdr	Shift 17
50	identifier	Shift 7
50	if	Shift 6
50	integer_number	Shift 2
50	let	Shift 8
50	letrec	Shift 9
50	new	Shift 23
50	null?	Shift 15
50	print	Shift 18
50	proc	Shift 10
50	read	Shift 19
50	readInt	Shift 20
50	ready	Shift 22
50	send	Shift 21
50	set	Shift 12
50	spawn	Shift 24
50	string	Shift 4
50	zero?	Shift 14
51	(	Shift 5
51	-	Shift 3
51	[	Shift 13
51	append	Shift 25
51	begin	Shift 11
51	car	Shift 16
51	cdr	Shift 17
51	identifier	Shift 7
51	if	Shift 6
51	integer_number	Shift 2
51	let	Shift 8
51	letrec	Shift 9
51	new	Shift 23
51	null?	Shift 15
51	print	Shift 18
51	proc	Shift 10
51	read	Shift 19
51	readInt	Shift 20
51	ready	Shift 22
51	send	Shift 21
51	set	Shift 12
51	spawn	Shift 24
51	string	Shift 4
51	zero?	Shift 14
52	(	Shift 5
52	-	Shift 3
52	[	Shift 13
52	append	Shift 25
52	begin	Shift 11
52	car	Shift 16
52	cdr	Shift 17
52	identifier	Shift 7
52	if	Shift 6
52	integer_number	Shift 2
52	let	Shift 8
52	letrec	Shift 9
52	new	Shift 23
52	null?	Shift 15
52	print	Shift 18
52	proc	Shift 10
52	read	Shift 19
52	readInt	Shift 20
52	ready	Shift 22
52	send	Shift 21
52	set	Shift 12
52	spawn	Shift 24
52	string	Shift 4
52	zero?	Shift 14
53	identifier	Shift 84
54	,	Shift 85
55	)	Shift 86
56	(	Shift 5
56	)	Reduce 37
56	-	Shift 3
56	[	Shift 13
56	append	Shift 25
56	begin	Shift 11
56	car	Shift 16
56	cdr	Shift 17
56	identifier	Shift 7
56	if	Shift 6
56	integer_number	Shift 2
56	let	Shift 8
56	letrec	Shift 9
56	new	Shift 23
56	null?	Shift 15
56	print	Shift 18
56	proc	Shift 10
56	read	Shift 19
56	readInt	Shift 20
56	ready	Shift 22
56	send	Shift 21
56	set	Shift 12
56	spawn	Shift 24
56	string	Shift 4
56	zero?	Shift 14
57	(	Shift 5
57	-	Shift 3
57	[	Shift 13
57	append	Shift 25
57	begin	Shift 11
57	car	Shift 16
57	cdr	Shift 17
57	identifier	Shift 7
57	if	Shift 6
57	integer_number	Shift 2
57	let	Shift 8
57	letrec	Shift 9
57	new	Shift 23
57	null?	Shift 15
57	print	Shift 18
57	proc	Shift 10
57	read	Shift 19
57	readInt	Shift 20
57	ready	Shift 22
57	send	Shift 21
57	set	Shift 12
57	spawn	Shift 24
57	string	Shift 4
57	zero?	Shift 14
58	(	Reduce 36
58	)	Reduce 36
58	++	Reduce 36
58	,	Reduce 36
58	-	Reduce 36
58	;	Reduce 36
58	==	Reduce 36
58	[	Reduce 36
58	append	Reduce 36
58	begin	Reduce 36
58	car	Reduce 36
58	cdr	Reduce 36
58	else	Reduce 36
58	end	Reduce 36
58	identifier	Reduce 36
58	if	Reduce 36
58	in	Reduce 36
58	integer_number	Reduce 36
58	let	Reduce 36
58	letrec	Reduce 36
58	new	Reduce 36
58	null?	Reduce 36
58	print	Reduce 36
58	proc	Reduce 36
58	read	Reduce 36
58	readInt	Reduce 36
58	ready	Reduce 36
58	send	Reduce 36
58	set	Reduce 36
58	spawn	Reduce 36
58	string	Reduce 36
58	then	Reduce 36
58	zero?	Reduce 36
58	$	Reduce 36
59	(	Shift 5
59	-	Shift 3
59	[	Shift 13
59	append	Shift 25
59	begin	Shift 11
59	car	Shift 16
59	cdr	Shift 17
59	identifier	Shift 7
59	if	Shift 6
59	integer_number	Shift 2
59	let	Shift 8
59	letrec	Shift 9
59	new	Shift 23
59	null?	Shift 15
59	print	Shift 18
59	proc	Shift 10
59	read	Shift 19
59	readInt	Shift 20
59	ready	Shift 22
59	send	Shift 21
59	set	Shift 12
59	spawn	Shift 24
59	string	Shift 4
59	zero?	Shift 14
60	)	Shift 91
61	)	Reduce 42
61	,	Shift 92
62	(	Shift 5
62	-	Shift 3
62	[	Shift 13
62	append	Shift 25
62	begin	Shift 11
62	car	Shift 16
62	cdr	Shift 17
62	identifier	Shift 7
62	if	Shift 6
62	integer_number	Shift 2
62	let	Shift 8
62	letrec	Shift 9
62	new	Shift 23
62	null?	Shift 15
62	print	Shift 18
62	proc	Shift 10
62	read	Shift 19
62	readInt	Shift 20
62	ready	Shift 22
62	send	Shift 21
62	set	Shift 12
62	spawn	Shift 24
62	string	Shift 4
62	zero?	Shift 14
63	(	Shift 5
63	-	Shift 3
63	[	Shift 13
63	append	Shift 25
63	begin	Shift 11
63	car	Shift 16
63	cdr	Shift 17
63	identifier	Shift 7
63	if	Shift 6
63	integer_number	Shift 2
63	let	Shift 8
63	letrec	Shift 9
63	new	Shift 23
63	null?	Shift 15
63	print	Shift 18
63	proc	Shift 10
63	read	Shift 19
63	readInt	Shift 20
63	ready	Shift 22
63	send	Shift 21
63	set	Shift 12
63	spawn	Shift 24
63	string	Shift 4
63	zero?	Shift 14
64	(	Shift 95
65	identifier	Shift 96
66	(	Shift 5
66	-	Shift 3
66	[	Shift 13
66	append	Shift 25
66	begin	Shift 11
66	car	Shift 16
66	cdr	Shift 17
66	identifier	Shift 7
66	if	Shift 6
66	integer_number	Shift 2
66	let	Shift 8
66	letrec	Shift 9
66	new	Shift 23
66	null?	Shift 15
66	print	Shift 18
66	proc	Shift 10
66	read	Shift 19
66	readInt	Shift 20
66	ready	Shift 22
66	send	Shift 21
66	set	Shift 12
66	spawn	Shift 24
66	string	Shift 4
66	zero?	Shift 14
67	(	Reduce 13
67	)	Reduce 13
67	++	Reduce 13
67	,	Reduce 13
67	-	Reduce 13
67	;	Reduce 13
67	==	Reduce 13
67	[	Reduce 13
67	append	Reduce 13
67	begin	Reduce 13
67	car	Reduce 13
67	cdr	Reduce 13
67	else	Reduce 13
67	end	Reduce 13
67	identifier	Reduce 13
67	if	Reduce 13
67	in	Reduce 13
67	integer_number	Reduce 13
67	let	Reduce 13
67	letrec	Reduce 13
67	new	Reduce 13
67	null?	Reduce 13
67	print	Reduce 13
67	proc	Reduce 13
67	read	Reduce 13
67	readInt	Reduce 13
67	ready	Reduce 13
67	send	Reduce 13
67	set	Reduce 13
67	spawn	Reduce 13
67	string	Reduce 13
67	then	Reduce 13
67	zero?	Reduce 13
67	$	Reduce 13
68	(	Shift 5
68	-	Shift 3
68	[	Shift 13
68	append	Shift 25
68	begin	Shift 11
68	car	Shift 16
68	cdr	Shift 17
68	identifier	Shift 7
68	if	Shift 6
68	integer_number	Shift 2
68	let	Shift 8
68	letrec	Shift 9
68	new	Shift 23
68	null?	Shift 15
68	print	Shift 18
68	proc	Shift 10
68	read	Shift 19
68	readInt	Shift 20
68	ready	Shift 22
68	send	Shift 21
68	set	Shift 12
68	spawn	Shift 24
68	string	Shift 4
68	zero?	Shift 14
69	(	Reduce 17
69	)	Reduce 17
69	++	Reduce 17
69	,	Reduce 17
69	-	Reduce 17
69	;	Reduce 17
69	==	Reduce 17
69	[	Reduce 17
69	append	Reduce 17
69	begin	Reduce 17
69	car	Reduce 17
69	cdr	Reduce 17
69	else	Reduce 17
69	end	Reduce 17
69	identifier	Reduce 17
69	if	Reduce 17
69	in	Reduce 17
69	integer_number	Reduce 17
69	let	Reduce 17
69	letrec	Reduce 17
69	new	Reduce 17
69	null?	Reduce 17
69	print	Reduce 17
69	proc	Reduce 17
69	read	Reduce 17
69	readInt	Reduce 17
69	ready	Reduce 17
69	send	Reduce 17
69	set	Reduce 17
69	spawn	Reduce 17
69	string	Reduce 17
69	then	Reduce 17
69	zero?	Reduce 17
69	$	Reduce 17
70	integer_number	Shift 41
71	)	Shift 100
72	)	Shift 101
73	)	Shift 102
74	)	Shift 103
75	)	Reduce 25
75	++	Reduce 25
76	)	Shift 104
76	++	Shift 105
77	(	Reduce 27
77	)	Reduce 27
77	++	Reduce 27
77	,	Reduce 27
77	-	Reduce 27
77	;	Reduce 27
77	==	Reduce 27
77	[	Reduce 27
77	append	Reduce 27
77	begin	Reduce 27
77	car	Reduce 27
77	cdr	Reduce 27
77	else	Reduce 27
77	end	Reduce 27
77	identifier	Reduce 27
77	if	Reduce 27
77	in	Reduce 27
77	integer_number	Reduce 27
77	let	Reduce 27
77	letrec	Reduce 27
77	new	Reduce 27
77	null?	Reduce 27
77	print	Reduce 27
77	proc	Reduce 27
77	read	Reduce 27
77	readInt	Reduce 27
77	ready	Reduce 27
77	send	Reduce 27
77	set	Reduce 27
77	spawn	Reduce 27
77	string	Reduce 27
77	then	Reduce 27
77	zero?	Reduce 27
77	$	Reduce 27
78	(	Reduce 28
78	)	Reduce 28
78	++	Reduce 28
78	,	Reduce 28
78	-	Reduce 28
78	;	Reduce 28
78	==	Reduce 28
78	[	Reduce 28
78	append	Reduce 28
78	begin	Reduce 28
78	car	Reduce 28
78	cdr	Reduce 28
78	else	Reduce 28
78	end	Reduce 28
78	identifier	Reduce 28
78	if	Reduce 28
78	in	Reduce 28
78	integer_number	Reduce 28
78	let	Reduce 28
78	letrec	Reduce 28
78	new	Reduce 28
78	null?	Reduce 28
78	print	Reduce 28
78	proc	Reduce 28
78	read	Reduce 28
78	readInt	Reduce 28
78	ready	Reduce 28
78	send	Reduce 28
78	set	Reduce 28
78	spawn	Reduce 28
78	string	Reduce 28
78	then	Reduce 28
78	zero?	Reduce 28
78	$	Reduce 28
79	)	Reduce 31
79	,	Shift 106
80	)	Shift 107
81	)	Shift 108
82	)	Shift 109
83	)	Shift 110
84	,	Shift 111
85	(	Shift 5
85	-	Shift 3
85	[	Shift 13
85	append	Shift 25
85	begin	Shift 11
85	car	Shift 16
85	cdr	Shift 17
85	identifier	Shift 7
85	if	Shift 6
85	integer_number	Shift 2
85	let	Shift 8
85	letrec	Shift 9
85	new	Shift 23
85	null?	Shift 15
85	print	Shift 18
85	proc	Shift 10
85	read	Shift 19
85	readInt	Shift 20
85	ready	Shift 22
85	send	Shift 21
85	set	Shift 12
85	spawn	Shift 24
85	string	Shift 4
85	zero?	Shift 14
86	(	Reduce 12
86	)	Reduce 12
86	++	Reduce 12
86	,	Reduce 12
86	-	Reduce 12
86	;	Reduce 12
86	==	Reduce 12
86	[	Reduce 12
86	append	Reduce 12
86	begin	Reduce 12
86	car	Reduce 12
86	cdr	Reduce 12
86	else	Reduce 12
86	end	Reduce 12
86	identifier	Reduce 12
86	if	Reduce 12
86	in	Reduce 12
86	integer_number	Reduce 12
86	let	Reduce 12
86	letrec	Reduce 12
86	new	Reduce 12
86	null?	Reduce 12
86	print	Reduce 12
86	proc	Reduce 12
86	read	Reduce 12
86	readInt	Reduce 12
86	ready	Reduce 12
86	send	Reduce 12
86	set	Reduce 12
86	spawn	Reduce 12
86	string	Reduce 12
86	then	Reduce 12
86	zero?	Reduce 12
86	$	Reduce 12
87	)	Reduce 38
87	,	Shift 56
88	)	Reduce 39
89	)	Shift 113
90	else	Shift 114
91	=	Shift 115
92	)	Reduce 41
92	identifier	Shift 61
93	in	Shift 117
94	(	Reduce 8
94	)	Reduce 8
94	++	Reduce 8
94	,	Reduce 8
94	-	Reduce 8
94	;	Reduce 8
94	==	Reduce 8
94	[	Reduce 8
94	append	Reduce 8
94	begin	Reduce 8
94	car	Reduce 8
94	cdr	Reduce 8
94	else	Reduce 8
94	end	Reduce 8
94	identifier	Reduce 8
94	if	Reduce 8
94	in	Reduce 8
94	integer_number	Reduce 8
94	let	Reduce 8
94	letrec	Reduce 8
94	new	Reduce 8
94	null?	Reduce 8
94	print	Reduce 8
94	proc	Reduce 8
94	read	Reduce 8
94	readInt	Reduce 8
94	ready	Reduce 8
94	send	Reduce 8
94	set	Reduce 8
94	spawn	Reduce 8
94	string	Reduce 8
94	then	Reduce 8
94	zero?	Reduce 8
94	$	Reduce 8
95	identifier	Shift 118
96	)	Shift 119
97	end	Reduce 15
98	(	Reduce 16
98	)	Reduce 16
98	++	Reduce 16
98	,	Reduce 16
98	-	Reduce 16
98	;	Reduce 16
98	==	Reduce 16
98	[	Reduce 16
98	append	Reduce 16
98	begin	Reduce 16
98	car	Reduce 16
98	cdr	Reduce 16
98	else	Reduce 16
98	end	Reduce 16
98	identifier	Reduce 16
98	if	Reduce 16
98	in	Reduce 16
98	integer_number	Reduce 16
98	let	Reduce 16
98	letrec	Reduce 16
98	new	Reduce 16
98	null?	Reduce 16
98	print	Reduce 16
98	proc	Reduce 16
98	read	Reduce 16
98	readInt	Reduce 16
98	ready	Reduce 16
98	send	Reduce 16
98	set	Reduce 16
98	spawn	Reduce 16
98	string	Reduce 16
98	then	Reduce 16
98	zero?	Reduce 16
98	$	Reduce 16
99	]	Reduce 19
100	(	Reduce 20
100	)	Reduce 20
100	++	Reduce 20
100	,	Reduce 20
100	-	Reduce 20
100	;	Reduce 20
100	==	Reduce 20
100	[	Reduce 20
100	append	Reduce 20
100	begin	Reduce 20
100	car	Reduce 20
100	cdr	Reduce 20
100	else	Reduce 20
100	end	Reduce 20
100	identifier	Reduce 20
100	if	Reduce 20
100	in	Reduce 20
100	integer_number	Reduce 20
100	let	Reduce 20
100	letrec	Reduce 20
100	new	Reduce 20
100	null?	Reduce 20
100	print	Reduce 20
100	proc	Reduce 20
100	read	Reduce 20
100	readInt	Reduce 20
100	ready	Reduce 20
100	send	Reduce 20
100	set	Reduce 20
100	spawn	Reduce 20
100	string	Reduce 20
100	then	Reduce 20
100	zero?	Reduce 20
100	$	Reduce 20
101	(	Reduce 21
101	)	Reduce 21
101	++	Reduce 21
101	,	Reduce 21
101	-	Reduce 21
101	;	Reduce 21
101	==	Reduce 21
101	[	Reduce 21
101	append	Reduce 21
101	begin	Reduce 21
101	car	Reduce 21
101	cdr	Reduce 21
101	else	Reduce 21
101	end	Reduce 21
101	identifier	Reduce 21
101	if	Reduce 21
101	in	Reduce 21
101	integer_number	Reduce 21
101	let	Reduce 21
101	letrec	Reduce 21
101	new	Reduce 21
101	null?	Reduce 21
101	print	Reduce 21
101	proc	Reduce 21
101	read	Reduce 21
101	readInt	Reduce 21
101	ready	Reduce 21
101	send	Reduce 21
101	set	Reduce 21
101	spawn	Reduce 21
101	string	Reduce 21
101	then	Reduce 21
101	zero?	Reduce 21
101	$	Reduce 21
102	(	Reduce 22
102	)	Reduce 22
102	++	Reduce 22
102	,	Reduce 22
102	-	Reduce 22
102	;	Reduce 22
102	==	Reduce 22
102	[	Reduce 22
102	append	Reduce 22
102	begin	Reduce 22
102	car	Reduce 22
102	cdr	Reduce 22
102	else	Reduce 22
102	end	Reduce 22
102	identifier	Reduce 22
102	if	Reduce 22
102	in	Reduce 22
102	integer_number	Reduce 22
102	let	Reduce 22
102	letrec	Reduce 22
102	new	Reduce 22
102	null?	Reduce 22
102	print	Reduce 22
102	proc	Reduce 22
102	read	Reduce 22
102	readInt	Reduce 22
102	ready	Reduce 22
102	send	Reduce 22
102	set	Reduce 22
102	spawn	Reduce 22
102	string	Reduce 22
102	then	Reduce 22
102	zero?	Reduce 22
102	$	Reduce 22
103	(	Reduce 23
103	)	Reduce 23
103	++	Reduce 23
103	,	Reduce 23
103	-	Reduce 23
103	;	Reduce 23
103	==	Reduce 23
103	[	Reduce 23
103	append	Reduce 23
103	begin	Reduce 23
103	car	Reduce 23
103	cdr	Reduce 23
103	else	Reduce 23
103	end	Reduce 23
103	identifier	Reduce 23
103	if	Reduce 23
103	in	Reduce 23
103	integer_number	Reduce 23
103	let	Reduce 23
103	letrec	Reduce 23
103	new	Reduce 23
103	null?	Reduce 23
103	print	Reduce 23
103	proc	Reduce 23
103	read	Reduce 23
103	readInt	Reduce 23
103	ready	Reduce 23
103	send	Reduce 23
103	set	Reduce 23
103	spawn	Reduce 23
103	string	Reduce 23
103	then	Reduce 23
103	zero?	Reduce 23
103	$	Reduce 23
104	(	Reduce 24
104	)	Reduce 24
104	++	Reduce 24
104	,	Reduce 24
104	-	Reduce 24
104	;	Reduce 24
104	==	Reduce 24
104	[	Reduce 24
104	append	Reduce 24
104	begin	Reduce 24
104	car	Reduce 24
104	cdr	Reduce 24
104	else	Reduce 24
104	end	Reduce 24
104	identifier	Reduce 24
104	if	Reduce 24
104	in	Reduce 24
104	integer_number	Reduce 24
104	let	Reduce 24
104	letrec	Reduce 24
104	new	Reduce 24
104	null?	Reduce 24
104	print	Reduce 24
104	proc	Reduce 24
104	read	Reduce 24
104	readInt	Reduce 24
104	ready	Reduce 24
104	send	Reduce 24
104	set	Reduce 24
104	spawn	Reduce 24
104	string	Reduce 24
104	then	Reduce 24
104	zero?	Reduce 24
104	$	Reduce 24
105	(	Shift 5
105	-	Shift 3
105	[	Shift 13
105	append	Shift 25
105	begin	Shift 11
105	car	Shift 16
105	cdr	Shift 17
105	identifier	Shift 7
105	if	Shift 6
105	integer_number	Shift 2
105	let	Shift 8
105	letrec	Shift 9
105	new	Shift 23
105	null?	Shift 15
105	print	Shift 18
105	proc	Shift 10
105	read	Shift 19
105	readInt	Shift 20
105	ready	Shift 22
105	send	Shift 21
105	set	Shift 12
105	spawn	Shift 24
105	string	Shift 4
105	zero?	Shift 14
106	(	Shift 5
106	-	Shift 3
106	[	Shift 13
106	append	Shift 25
106	begin	Shift 11
106	car	Shift 16
106	cdr	Shift 17
106	identifier	Shift 7
106	if	Shift 6
106	integer_number	Shift 2
106	let	Shift 8
106	letrec	Shift 9
106	new	Shift 23
106	null?	Shift 15
106	print	Shift 18
106	proc	Shift 10
106	read	Shift 19
106	readInt	Shift 20
106	ready	Shift 22
106	send	Shift 21
106	set	Shift 12
106	spawn	Shift 24
106	string	Shift 4
106	zero?	Shift 14
107	(	Reduce 30
107	)	Reduce 30
107	++	Reduce 30
107	,	Reduce 30
107	-	Reduce 30
107	;	Reduce 30
107	==	Reduce 30
107	[	Reduce 30
107	append	Reduce 30
107	begin	Reduce 30
107	car	Reduce 30
107	cdr	Reduce 30
107	else	Reduce 30
107	end	Reduce 30
107	identifier	Reduce 30
107	if	Reduce 30
107	in	Reduce 30
107	integer_number	Reduce 30
107	let	Reduce 30
107	letrec	Reduce 30
107	new	Reduce 30
107	null?	Reduce 30
107	print	Reduce 30
107	proc	Reduce 30
107	read	Reduce 30
107	readInt	Reduce 30
107	ready	Reduce 30
107	send	Reduce 30
107	set	Reduce 30
107	spawn	Reduce 30
107	string	Reduce 30
107	then	Reduce 30
107	zero?	Reduce 30
107	$	Reduce 30
108	(	Reduce 33
108	)	Reduce 33
108	++	Reduce 33
108	,	Reduce 33
108	-	Reduce 33
108	;	Reduce 33
108	==	Reduce 33
108	[	Reduce 33
108	append	Reduce 33
108	begin	Reduce 33
108	car	Reduce 33
108	cdr	Reduce 33
108	else	Reduce 33
108	end	Reduce 33
108	identifier	Reduce 33
108	if	Reduce 33
108	in	Reduce 33
108	integer_number	Reduce 33
108	let	Reduce 33
108	letrec	Reduce 33
108	new	Reduce 33
108	null?	Reduce 33
108	print	Reduce 33
108	proc	Reduce 33
108	read	Reduce 33
108	readInt	Reduce 33
108	ready	Reduce 33
108	send	Reduce 33
108	set	Reduce 33
108	spawn	Reduce 33
108	string	Reduce 33
108	then	Reduce 33
108	zero?	Reduce 33
108	$	Reduce 33
109	(	Reduce 34
109	)	Reduce 34
109	++	Reduce 34
109	,	Reduce 34
109	-	Reduce 34
109	;	Reduce 34
109	==	Reduce 34
109	[	Reduce 34
109	append	Reduce 34
109	begin	Reduce 34
109	car	Reduce 34
109	cdr	Reduce 34
109	else	Reduce 34
109	end	Reduce 34
109	identifier	Reduce 34
109	if	Reduce 34
109	in	Reduce 34
109	integer_number	Reduce 34
109	let	Reduce 34
109	letrec	Reduce 34
109	new	Reduce 34
109	null?	Reduce 34
109	print	Reduce 34
109	proc	Reduce 34
109	read	Reduce 34
109	readInt	Reduce 34
109	ready	Reduce 34
109	send	Reduce 34
109	set	Reduce 34
109	spawn	Reduce 34
109	string	Reduce 34
109	then	Reduce 34
109	zero?	Reduce 34
109	$	Reduce 34
110	(	Reduce 35
110	)	Reduce 35
110	++	Reduce 35
110	,	Reduce 35
110	-	Reduce 35
110	;	Reduce 35
110	==	Reduce 35
110	[	Reduce 35
110	append	Reduce 35
110	begin	Reduce 35
110	car	Reduce 35
110	cdr	Reduce 35
110	else	Reduce 35
110	end	Reduce 35
110	identifier	Reduce 35
110	if	Reduce 35
110	in	Reduce 35
110	integer_number	Reduce 35
110	let	Reduce 35
110	letrec	Reduce 35
110	new	Reduce 35
110	null?	Reduce 35
110	print	Reduce 35
110	proc	Reduce 35
110	read	Reduce 35
110	readInt	Reduce 35
110	ready	Reduce 35
110	send	Reduce 35
110	set	Reduce 35
110	spawn	Reduce 35
110	string	Reduce 35
110	then	Reduce 35
110	zero?	Reduce 35
110	$	Reduce 35
111	(	Shift 5
111	-	Shift 3
111	[	Shift 13
111	append	Shift 25
111	begin	Shift 11
111	car	Shift 16
111	cdr	Shift 17
111	identifier	Shift 7
111	if	Shift 6
111	integer_number	Shift 2
111	let	Shift 8
111	letrec	Shift 9
111	new	Shift 23
111	null?	Shift 15
111	print	Shift 18
111	proc	Shift 10
111	read	Shift 19
111	readInt	Shift 20
111	ready	Shift 22
111	send	Shift 21
111	set	Shift 12
111	spawn	Shift 24
111	string	Shift 4
111	zero?	Shift 14
112	)	Shift 123
113	(	Reduce 29
113	)	Reduce 29
113	++	Reduce 29
113	,	Reduce 29
113	-	Reduce 29
113	;	Reduce 29
113	==	Reduce 29
113	[	Reduce 29
113	append	Reduce 29
113	begin	Reduce 29
113	car	Reduce 29
113	cdr	Reduce 29
113	else	Reduce 29
113	end	Reduce 29
113	identifier	Reduce 29
113	if	Reduce 29
113	in	Reduce 29
113	integer_number	Reduce 29
113	let	Reduce 29
113	letrec	Reduce 29
113	new	Reduce 29
113	null?	Reduce 29
113	print	Reduce 29
113	proc	Reduce 29
113	read	Reduce 29
113	readInt	Reduce 29
113	ready	Reduce 29
113	send	Reduce 29
113	set	Reduce 29
113	spawn	Reduce 29
113	string	Reduce 29
113	then	Reduce 29
113	zero?	Reduce 29
113	$	Reduce 29
114	(	Shift 5
114	-	Shift 3
114	[	Shift 13
114	append	Shift 25
114	begin	Shift 11
114	car	Shift 16
114	cdr	Shift 17
114	identifier	Shift 7
114	if	Shift 6
114	integer_number	Shift 2
114	let	Shift 8
114	letrec	Shift 9
114	new	Shift 23
114	null?	Shift 15
114	print	Shift 18
114	proc	Shift 10
114	read	Shift 19
114	readInt	Shift 20
114	ready	Shift 22
114	send	Shift 21
114	set	Shift 12
114	spawn	Shift 24
114	string	Shift 4
114	zero?	Shift 14
115	(	Shift 5
115	-	Shift 3
115	[	Shift 13
115	append	Shift 25
115	begin	Shift 11
115	car	Shift 16
115	cdr	Shift 17
115	identifier	Shift 7
115	if	Shift 6
115	integer_number	Shift 2
115	let	Shift 8
115	letrec	Shift 9
115	new	Shift 23
115	null?	Shift 15
115	print	Shift 18
115	proc	Shift 10
115	read	Shift 19
115	readInt	Shift 20
115	ready	Shift 22
115	send	Shift 21
115	set	Shift 12
115	spawn	Shift 24
115	string	Shift 4
115	zero?	Shift 14
116	)	Reduce 43
117	(	Shift 5
117	-	Shift 3
117	[	Shift 13
117	append	Shift 25
117	begin	Shift 11
117	car	Shift 16
117	cdr	Shift 17
117	identifier	Shift 7
117	if	Shift 6
117	integer_number	Shift 2
117	let	Shift 8
117	letrec	Shift 9
117	new	Shift 23
117	null?	Shift 15
117	print	Shift 18
117	proc	Shift 10
117	read	Shift 19
117	readInt	Shift 20
117	ready	Shift 22
117	send	Shift 21
117	set	Shift 12
117	spawn	Shift 24
117	string	Shift 4
117	zero?	Shift 14
118	)	Shift 127
119	(	Shift 5
119	-	Shift 3
119	[	Shift 13
119	append	Shift 25
119	begin	Shift 11
119	car	Shift 16
119	cdr	Shift 17
119	identifier	Shift 7
119	if	Shift 6
119	integer_number	Shift 2
119	let	Shift 8
119	letrec	Shift 9
119	new	Shift 23
119	null?	Shift 15
119	print	Shift 18
119	proc	Shift 10
119	read	Shift 19
119	readInt	Shift 20
119	ready	Shift 22
119	send	Shift 21
119	set	Shift 12
119	spawn	Shift 24
119	string	Shift 4
119	zero?	Shift 14
120	)	Reduce 26
120	++	Shift 105
121	)	Reduce 32
122	)	Shift 129
123	(	Reduce 4
123	)	Reduce 4
123	++	Reduce 4
123	,	Reduce 4
123	-	Reduce 4
123	;	Reduce 4
123	==	Reduce 4
123	[	Reduce 4
123	append	Reduce 4
123	begin	Reduce 4
123	car	Reduce 4
123	cdr	Reduce 4
123	else	Reduce 4
123	end	Reduce 4
123	identifier	Reduce 4
123	if	Reduce 4
123	in	Reduce 4
123	integer_number	Reduce 4
123	let	Reduce 4
123	letrec	Reduce 4
123	new	Reduce 4
123	null?	Reduce 4
123	print	Reduce 4
123	proc	Reduce 4
123	read	Reduce 4
123	readInt	Reduce 4
123	ready	Reduce 4
123	send	Reduce 4
123	set	Reduce 4
123	spawn	Reduce 4
123	string	Reduce 4
123	then	Reduce 4
123	zero?	Reduce 4
123	$	Reduce 4
124	(	Reduce 5
124	)	Reduce 5
124	++	Reduce 5
124	,	Reduce 5
124	-	Reduce 5
124	;	Reduce 5
124	==	Reduce 5
124	[	Reduce 5
124	append	Reduce 5
124	begin	Reduce 5
124	car	Reduce 5
124	cdr	Reduce 5
124	else	Reduce 5
124	end	Reduce 5
124	identifier	Reduce 5
124	if	Reduce 5
124	in	Reduce 5
124	integer_number	Reduce 5
124	let	Reduce 5
124	letrec	Reduce 5
124	new	Reduce 5
124	null?	Reduce 5
124	print	Reduce 5
124	proc	Reduce 5
124	read	Reduce 5
124	readInt	Reduce 5
124	ready	Reduce 5
124	send	Reduce 5
124	set	Reduce 5
124	spawn	Reduce 5
124	string	Reduce 5
124	then	Reduce 5
124	zero?	Reduce 5
124	$	Reduce 5
125	in	Shift 130
126	(	Reduce 7
126	)	Reduce 7
126	++	Reduce 7
126	,	Reduce 7
126	-	Reduce 7
126	;	Reduce 7
126	==	Reduce 7
126	[	Reduce 7
126	append	Reduce 7
126	begin	Reduce 7
126	car	Reduce 7
126	cdr	Reduce 7
126	else	Reduce 7
126	end	Reduce 7
126	identifier	Reduce 7
126	if	Reduce 7
126	in	Reduce 7
126	integer_number	Reduce 7
126	let	Reduce 7
126	letrec	Reduce 7
126	new	Reduce 7
126	null?	Reduce 7
126	print	Reduce 7
126	proc	Reduce 7
126	read	Reduce 7
126	readInt	Reduce 7
126	ready	Reduce 7
126	send	Reduce 7
126	set	Reduce 7
126	spawn	Reduce 7
126	string	Reduce 7
126	then	Reduce 7
126	zero?	Reduce 7
126	$	Reduce 7
127	=	Shift 131
128	(	Reduce 11
128	)	Reduce 11
128	++	Reduce 11
128	,	Reduce 11
128	-	Reduce 11
128	;	Reduce 11
128	==	Reduce 11
128	[	Reduce 11
128	append	Reduce 11
128	begin	Reduce 11
128	car	Reduce 11
128	cdr	Reduce 11
128	else	Reduce 11
128	end	Reduce 11
128	identifier	Reduce 11
128	if	Reduce 11
128	in	Reduce 11
128	integer_number	Reduce 11
128	let	Reduce 11
128	letrec	Reduce 11
128	new	Reduce 11
128	null?	Reduce 11
128	print	Reduce 11
128	proc	Reduce 11
128	read	Reduce 11
128	readInt	Reduce 11
128	ready	Reduce 11
128	send	Reduce 11
128	set	Reduce 11
128	spawn	Reduce 11
128	string	Reduce 11
128	then	Reduce 11
128	zero?	Reduce 11
128	$	Reduce 11
129	(	Reduce 44
129	)	Reduce 44
129	++	Reduce 44
129	,	Reduce 44
129	-	Reduce 44
129	;	Reduce 44
129	==	Reduce 44
129	[	Reduce 44
129	append	Reduce 44
129	begin	Reduce 44
129	car	Reduce 44
129	cdr	Reduce 44
129	else	Reduce 44
129	end	Reduce 44
129	identifier	Reduce 44
129	if	Reduce 44
129	in	Reduce 44
129	integer_number	Reduce 44
129	let	Reduce 44
129	letrec	Reduce 44
129	new	Reduce 44
129	null?	Reduce 44
129	print	Reduce 44
129	proc	Reduce 44
129	read	Reduce 44
129	readInt	Reduce 44
129	ready	Reduce 44
129	send	Reduce 44
129	set	Reduce 44
129	spawn	Reduce 44
129	string	Reduce 44
129	then	Reduce 44
129	zero?	Reduce 44
129	$	Reduce 44
130	(	Shift 5
130	-	Shift 3
130	[	Shift 13
130	append	Shift 25
130	begin	Shift 11
130	car	Shift 16
130	cdr	Shift 17
130	identifier	Shift 7
130	if	Shift 6
130	integer_number	Shift 2
130	let	Shift 8
130	letrec	Shift 9
130	new	Shift 23
130	null?	Shift 15
130	print	Shift 18
130	proc	Shift 10
130	read	Shift 19
130	readInt	Shift 20
130	ready	Shift 22
130	send	Shift 21
130	set	Shift 12
130	spawn	Shift 24
130	string	Shift 4
130	zero?	Shift 14
131	(	Shift 5
131	-	Shift 3
131	[	Shift 13
131	append	Shift 25
131	begin	Shift 11
131	car	Shift 16
131	cdr	Shift 17
131	identifier	Shift 7
131	if	Shift 6
131	integer_number	Shift 2
131	let	Shift 8
131	letrec	Shift 9
131	new	Shift 23
131	null?	Shift 15
131	print	Shift 18
131	proc	Shift 10
131	read	Shift 19
131	readInt	Shift 20
131	ready	Shift 22
131	send	Shift 21
131	set	Shift 12
131	spawn	Shift 24
131	string	Shift 4
131	zero?	Shift 14
132	(	Reduce 40
132	)	Reduce 40
132	++	Reduce 40
132	,	Reduce 40
132	-	Reduce 40
132	;	Reduce 40
132	==	Reduce 40
132	[	Reduce 40
132	append	Reduce 40
132	begin	Reduce 40
132	car	Reduce 40
132	cdr	Reduce 40
132	else	Reduce 40
132	end	Reduce 40
132	identifier	Reduce 40
132	if	Reduce 40
132	in	Reduce 40
132	integer_number	Reduce 40
132	let	Reduce 40
132	letrec	Reduce 40
132	new	Reduce 40
132	null?	Reduce 40
132	print	Reduce 40
132	proc	Reduce 40
132	read	Reduce 40
132	readInt	Reduce 40
132	ready	Reduce 40
132	send	Reduce 40
132	set	Reduce 40
132	spawn	Reduce 40
132	string	Reduce 40
132	then	Reduce 40
132	zero?	Reduce 40
132	$	Reduce 40
133	identifier	Shift 34
133	in	Reduce 9
134	in	Reduce 10
